\documentclass[pdf]{beamer}
\mode<presentation>{}
\addtobeamertemplate{navigation symbols}{}{%
    \usebeamerfont{footline}%
    \usebeamercolor[fg]{footline}%
    \hspace{1em}%
    \insertframenumber/\inserttotalframenumber
}
\usepackage[utf8]{inputenc}
\usepackage{enumerate}
\usepackage{mathtools,amssymb}
\usepackage{mathtools}
\DeclarePairedDelimiter\ceil{\lceil}{\rceil}
\DeclarePairedDelimiter\floor{\lfloor}{\rfloor}

\usetheme{Berlin}
 
\title{Simple Unpredictable Pseudo Random Number Generator}
\subtitle{The $1/P$ Generator}
\date{}
\author{R. Ashworth \& H. Imanda}

\begin{document}

\begin{frame}
\titlepage
\end{frame} 

\begin{frame}
\begin{block}{Definition}
A \textbf{Pseudo-random generator} (PRG) is an algorithm for generating a sequence of numbers whose properties approximate the properties of a sequence of random numbers.
\end{block}
\pause
\begin{block}{Definition}
A \textbf{cryptographically secure} PRG is one where the advantage to an attacker attempting to distinguish between it and a truly random string of numbers is negligible. \pause 

In other words, a PRG must pass certain statistical tests while a CSPRG must pass \emph{all} statistical tests restricted to polynomial time.
\end{block}
\end{frame}

\begin{frame}
\begin{block}{Definition}
For integers $b, P$, let $|P|_b$ denote the size of $P$ written in base $b$.
\end{block}
\pause
\begin{block}{Example}
Let $P = 753_{10}$ (base 10). Then $|P|_2 = \floor*{\log_2(753) + 1}.$
\end{block}
\end{frame}

%INDA -- FIX THAT MASSIVE DEFINITION PARAGRAPH
\begin{frame}
\begin{block}{The $1/P$ Generator}
Fix an integer $b > 1$ and let $\Sigma = \{0, 1 ,\ldots, b-1\}$.
\end{block}
\pause
\begin{block}{Definition}
Let $N = \{P \in \mathbb{Z} \ | \ \text{gcd}(P,b) = 1\}$ and let the seed domain $X = \amalg_{P \in N} Z^*_P$. Let $\mu_n$ be the distribution on $X^n$ given by $\mu_n(P,r) = u_n(P)\cdot v_P(r)$ where $u_n$ is the uniform probability distribution on $\{P \in N : |P|_b = n\}$ and $v_P$ is the uniform distribution on $Z^*_P$. Then $U = \{\mu_n\}$ is an accessible probability distribution on $X$.
\end{block}
\end{frame}


\begin{frame}
\begin{block}{Definition}
Define $G: X \rightarrow \Sigma^{\infty}$ (where $\Sigma^{\infty}$ is infinite strings in $\Sigma$) by letting $G(r/P) = q_1q_2\ldots$ be the sequence of $b$-ary quotient digits that follow the decimal point, where $r/P \in X$ is expanded base $b$.
\end{block}
\pause
\begin{block}{Example}
Let $b = 10$ and $P = 7$ and $r = 1$. Then the above sequence has input $1/7$ giving $142857142 \ldots$.
\end{block}
\end{frame}


\begin{frame}
\begin{block}{Claim}
The above sequence is periodic, with period dividing $\varphi(P)$.
\end{block}
\pause
\begin{block}{Proof}
Let $b$ be a primitive root of $P$. Then consider the continued fraction expansion of $P$. This has period $P-1$ and as such, the above sequence is periodic.
\end{block}
\end{frame}

\begin{frame}
\begin{block}{The $1/P$ Generator}
We define this pseudo random sequence generator the $1/P$ PRG (base $b$).
\end{block}
\end{frame}

\begin{frame}
\begin{block}{Some Crypto}
Why is the $1/P$ PRG good? \
\pause
\begin{itemize}
\item If $P \in \mathbb{P}$ and $b$ is a primitive root modulo $P$ the sequences have long periods ($P-1$) and {\it nice} distributional properties. \\
\pause
\item Hard to infer: Given $r$ generated during the expansion of $1/P \mod P$, it is difficult to find any $m$ such that $r_m = r$.
\end{itemize}
\pause
Note the second reason is the DLP: an adversary must solve $r_m \equiv b^m \mod P$. This is assumed a difficult problem for suitable $P$ and $b$.
\end{block}
\end{frame}

\begin{frame}
\begin{block}{Theorem}
The $1/P$ generator is a PRG but not a CSPRG. Equivalently, there exists a statistical test for deciding if a string is generated by the $1/P$ or not.
\end{block}
\pause
\begin{block}{}
Given a $3n$ long string of digits, where $n = |P|_b$ one may use a simple, yet efficient statistical test to attempt to recover $P$ and hence the sequence.
\end{block}
\end{frame}

\begin{frame}
\begin{block}{Definition}
A generalised de Bruijin sequence of period $P-1$, base $b$ is a sequence $q_1q_2\ldots$ of $b$-ary digits such that 1) every $b$-ary string is of length $|P|_b-1$ occurs at least once in the sequence and 2) every $b$-ary string of length $|P|$ occurs at most once in any given sequence.
\end{block}
\pause
\begin{block}{Example}
The sequence below is a base two, $P=3$ de Bruijn sequence: \\
00010111
\end{block}
\end{frame}

\begin{frame}
\begin{block}{Theorem}
Let $P \in \mathbb{P}$ and $b \in \{1, \ldots, P-1\}$ be a primitive root modulo $P$. Let $r_0 \in \{1, \ldots, P-1\}$. Then the PRG sequence by $1/P$, base $b$ with input $r_0/P$ is a generalised de Bruijn sequence, of period $P-1$, base $b$.
\end{block}
\end{frame}

\begin{frame}
\begin{block}{Lemma}
The $1/P$ sequence of quotient digits has period less than or equal to $P-1$.
\end{block}
\pause
\begin{block}{Proof}
$r_m = b^m \cdot r_0 \mod P$ where $b$ is a primitive root. The sequence of quotients $\frac{r_m}{P}$ is periodic, period at most $P-1$ by pigeonhole principle. If period less than $P-1$ then $\exists \ 0 \leq m_1 < m_2 < P-1$ such that $.q_{m_1+1}q_{m_1+2} \ldots = .q_{m_2+1}q_{m_2+2} \ldots$. But $\frac{r_m}{P} = . q_{m+1} q_{m+2} \ldots$ a contradiction.\\
\end{block}
\end{frame}

\begin{frame}
\begin{block}{Claim 2}
The $1/P$ sequence of quotient digits is a de Bruijn sequence.
\end{block}
\pause
\begin{block}{Sketch Proof}
The set of all $b$-ary strings of length $s$ correspond to a partition of the unit interval $[0,1)$, $[l/b^s, (l+1)/b^s$. Then $1/P < 1/(b^{|P|_b+1}$ so for every $l$ there is a $k$ such that $k/P$ is in a step of the partition, proving (1). \\
Also $1/b^{|P|_b} < 1/P$ so for each $l$ there is at most one $k$ such that $k/P$ is in any given block of the partition, proving (2).
\end{block}
\end{frame}



\begin{frame}
\begin{block}{Example}
Let $b=10$ and $P = 503$, so the PRG generates a period 502 sequence: \\
00198 80715 70576 54075 54671 96819 08548 70775 34791 25248 50894 63220 67594 43339 96023 
85685 88469 18489 06560 63618 29025 84493 04174 95029 82107 35586 48111 33200 79522 86282 
30616 30218 68787 27634 19483 10139 16500 99403 57852 88270 37773 35984 09542 74353 87673 \ldots
\end{block}
\end{frame}

\begin{frame}
\begin{block}
\tiny{ 00198 80715 70576 54075 54671 96819 08548 70775 34791 25248 50894 63220 67594 {\bf 43339 9}6023 
85685 88469 18489 06560 63618 29025 84493 04174 95029 82107 35586 48111 33200 79522 86282 
30616 30218 68787 27634 19483 10139 16500 99403 57852 88270 37773 35984 09542 74353 87673 \ldots}
\end{block}
\pause
$|503| = 3$, so every string of two decimal digits appears at least once in the above sequence and every string of three digits appears at most once. As $k = 2 \cdot |P|_b =6$ we can use any length 6 block above to recover $P$. For example consider the block $433399$.
\end{frame}

\begin{frame}
\begin{block}{Breaking the $1/P$ Generator}
The continued fraction of $0.433399$ is $433399/1'000'000 = [0; 2,3,3,1,16,6,1,1,358,\ldots]$, with convergents $\frac{1}{2}, \frac{3}{7}, \ldots, \frac{218}{503} = 0.433399$. These digits agree with the segment we previously identified. Then $P = 503$ and the remainder term $r_m = 218$, giving $r_{m-1} = 10^{-1} \cdot r_m \mod 503 = 151 \cdot 218 \mod 503 = 223$. In this way one may extend the sequence backwards and forwards as $223/503 = 0.4{\bf 433399}602$.
\end{block}
\end{frame}

\begin{frame}
\begin{block}{Comparing Results}
Prediction gives: $223/503 = 0.4{\bf 433399}602$, so we want a 4 before and a 602 after... \\
\pause
 00198 80715 70576 54075 54671 96819 08548 70775 34791 25248 50894 63220 6759{\bf4 43339 9602}3 
85685 88469 18489 06560 63618 29025 84493 04174 95029 82107 35586 48111 33200 79522 86282 
30616 30218 68787 27634 19483 10139 16500 99403 57852 88270 37773 35984 09542 74353 87673 \ldots \\
\end{block}
\end{frame}











\end{document}
